#!/usr/bin/env python3

import argparse
import re
import socket
import sys
from pathlib import Path

def printdebug(message):
  if debug:
    print(message)

def raise_error(message, code=1):
  print(message)
  sys.exit(code)

def sanitise_inputs(args):
  if args.ethernet is None and args.hostname is None:
    raise_error('Please specify either a hostname or a MAC address.')
  if args.protocol is not None:
    if args.protocol != '4' and args.protocol != '6':
      raise_error("IP protocol should be specified as '4' (for IPv4) or '6' (for IPv6).", 4)
  if args.protocol == '6':
    raise_error('IPv6 not currently supported.', 0)
  args.protocol = '4'
  if args.address is None:
    args.address = '255.255.255.255'
  if args.configpath is None:
    args.configpath = '/etc/kea'
  if args.configfile is None:
    args.configfile = 'kea-dhcp4.conf'
  return args
      
def find_host_data(hostname, configpath, configfile, protocol):
  keaconfig = f'{configpath}/{configfile}'
  printdebug(f'Finding the ethernet address for host {hostname} in {keaconfig}')
  if Path(keaconfig).exists():
    with open(keaconfig, 'r') as f:
      config = f.read()
  else:
    raise_error(f'Could not find Kea configuration file {keaconfig}.', 3)
  reservations = config[protocol]['reservations']
  hostdata = next((host for host in reservations if host['hostname'] == hostname), None)
  if hostdata is None:
    raise_error(f'Could not find {hostname} in configuration file {keaconfig}.', 2)
  else:
    hostdata = hostdata

def parse_ethernet(ethernet):
  ethernet = re.sub('[ :-]', '', ethernet)
  return ethernet

def create_magic_packet(ethernet):
  return bytes([0xFF] * 6) + bytes.fromhex(ethernet) * 16

def send_packet(ethernet, address):
  packet = create_magic_packet(ethernet)
  sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
  sock.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
  sock.sendto(packet, (address, 9))
  sock.close
  printdebug(f'Packet sent to MAC address {ethernet}, IPv4 address {address}')

global debug

parser = argparse.ArgumentParser(prog='wol', description='Wake On LAN with Kea DHCP server integration', usage='%(prog)s [options]')

parser.add_argument('-e', '--ethernet', help='Ethernet address to target.')
parser.add_argument('-a', '--address', help='IPv4 address to target.')
parser.add_argument('-n', '--hostname', help='Host name of target, as found in Kea configuration file.')
parser.add_argument('-c', '--configpath', help='Path to Kea configuration directory.')
parser.add_argument('-f', '--configfile', help='Name of Kea configuration file.')
parser.add_argument('-p', '--protocol', help="IP protocol, either '4' or '6'.")
parser.add_argument('-d', '--debug', action='store_true')

args = parser.parse_args()
debug = args.debug
args = sanitise_inputs(args)
printdebug(args)

if args.hostname is not None:
  hostdata = find_host_data(args.hostname, args.configpath, args.configfile, args.protocol)
  send_packet(parse_ethernet(hostdata['hw-address']), hostdata['ip-address'])
else:
  send_packet(parse_ethernet(args.ethernet), args.address)
